import asyncio
import logging
import sqlite3
import time
import os
import re

from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram import F

from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

global retriever, bot, conn
from langchain_mistralai import ChatMistralAI, MistralAIEmbeddings
from langchain.chains.combine_documents import create_stuff_documents_chain
from langchain.chains import create_retrieval_chain
from langchain_chroma import Chroma
from langgraph.checkpoint.memory import MemorySaver
from langchain_core.prompts import ChatPromptTemplate
from langchain_text_splitters import RecursiveCharacterTextSplitter
from langchain_community.document_loaders import Docx2txtLoader
from langgraph.graph import MessagesState, StateGraph
from langchain_core.messages import HumanMessage, SystemMessage

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª—é—á –¥–ª—è Mistral
os.environ["MISTRAL_API_KEY"] = "XSFzvyw9LNYEjKYPFYFhYCzerqjeAr7Y"
llm = ChatMistralAI(model="mistral-small-latest")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É (–µ—Å–ª–∏ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω–∞)
conn = sqlite3.connect("users_data.db")
cursor = conn.cursor()
cursor.execute("""
    CREATE TABLE IF NOT EXISTS user_progress (
        user_id INTEGER PRIMARY KEY,
        progress INTEGER DEFAULT 0,
        story TEXT DEFAULT '',
        thread_id TEXT DEFAULT ''
    )
""")
conn.commit()


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class Reg(StatesGroup):
    start = State()  # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
    dialog = State()  # –ò–≥—Ä–æ–≤–æ–π –¥–∏–∞–ª–æ–≥ (–∏–≥—Ä–∞ –∏–¥—ë—Ç)
    cont = State()  # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É
    new = State()  # –ù–æ–≤–∞—è –∏–≥—Ä–∞ (–æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π
start_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ú® –ù–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç ‚úÖ")],
        [KeyboardButton(text="üìú –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚ñ∂Ô∏è")],
        [KeyboardButton(text="üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞ üåç")],
    ],
    resize_keyboard=True,
    input_field_placeholder="üéÆ –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ...",  # ‚ö° –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
BOT_TOKEN = "7602719591:AAER_dkEQXD9x0O4RNnya5nzWss3RAnPqGE"
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å—é–∂–µ—Ç–∞, —Ä–∞–∑–±–∏–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞, —Å–æ–∑–¥–∞–Ω–∏–µ retriever
loader = Docx2txtLoader("story.docx")
data = loader.load()
embeddings = MistralAIEmbeddings(model="mistral-embed")
text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=200)
splits = text_splitter.split_documents(data)
vectorstore = Chroma.from_documents(documents=splits, embedding=embeddings)
retriever = vectorstore.as_retriever()  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è

# –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–º {context}
system_prompt = (
    "–¢—ã —á–∞—Ç-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–µ–¥–µ—Ç –∏–≥—Ä—É –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º Crystals of Fate. "
    "–ò–≥—Ä–∞ –≤–µ–¥–µ—Ç—Å—è –æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ –∏–º–µ–Ω–∏ –ö–∞–π. "
    "–ü–æ —Å—é–∂–µ—Ç—É, –ö–∞–π –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Ü–µ–Ω—Ç—Ä–µ –±–æ—Ä—å–±—ã –º–µ–∂–¥—É –º–∞–≥–∏—á–µ—Å–∫–∏–º –û—Ä–¥–µ–Ω–æ–º –°–≤–µ—Ç–∞, –≤—ã—Å–æ–∫–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω—ã–º–∏ –¢–µ—Ö–Ω–æ–∫—Ä–∞—Ç–∞–º–∏ –∏ —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ò–∑–≥–Ω–∞–Ω–Ω–∏–∫–∞–º–∏. "
    "–°–æ–≥–ª–∞—Å–Ω–æ –ª–æ—Ä—É –∏–≥—Ä—ã, –∫–∞–π –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä–µ–≤–Ω–∏–π –ö—Ä–∏—Å—Ç–∞–ª–ª, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫, –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–ª–∏ —Ä–∞–∑—Ä—É—à–∏—Ç—å –æ–∫–æ–≤—ã –≤–ª–∞—Å—Ç–∏, –ø–æ–∑–≤–æ–ª—è—è –º–∏—Ä—É —Å–∞–º–æ–º—É —Ä–µ—à–∞—Ç—å —Å–≤–æ—é —Å—É–¥—å–±—É. "
    "–¢—ã –¥–æ–ª–∂–µ–Ω –≤–µ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥ –æ—Ç –ª–∏—Ü–∞ –≤–µ–¥—É—â–µ–≥–æ –∏–≥—Ä—ã, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –æ—Ç–≤–µ—Ç—ã –∏–≥—Ä–æ–∫–∞, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∏–≥—Ä–æ–π. "
    "–í –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã, –∫–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ –Ω–∞–ø–∏—à–µ—Ç '–Ω–∞—á–∞—Ç—å –∏–≥—Ä—É' –∏–ª–∏ '–ù–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è', –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–ø–∏—Å–∞–Ω –º–∏—Ä –∏ —Å—é–∂–µ—Ç –∏–≥—Ä—ã, –Ω–∞—á–Ω–∏ –∏–≥—Ä—É —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞, –ø—Ä–∏ —ç—Ç–æ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –¥—Ä—É–≥–æ–µ –Ω–∞—á–∞–ª–æ. "
    "–ù–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤ –∏–≥—Ä–æ–∫–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–π —Å—é–∂–µ—Ç –¥–∞–ª—å—à–µ, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö –∏–≥—Ä–æ–∫–∞, –Ω–µ –æ—Ç—Å—Ç—É–ø–∞—è –æ—Ç —Å—é–∂–µ—Ç–∞. "
    "–ï—Å–ª–∏ —Ç–µ–±–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ '–Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∏–≥—Ä', —Ç–æ –æ—Ç–≤–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —É –Ω–µ–≥–æ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∏–≥—Ä, –∏ —á—Ç–æ –æ–Ω –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É. "
    "–í –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å—é–∂–µ—Ç–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–π –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞–∑–≤–∏—Ç–∏—è, –Ω—É–º–µ—Ä—É—è –∏—Ö, —Å–ø—Ä–∞—à–∏–≤–∞—è: '–ö–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Ç—ã —Å–¥–µ–ª–∞–µ—à—å?'. "
    "–¢–∞–∫–∂–µ —Ç–µ–±–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–≥—Ä–æ–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–π –µ–≥–æ –≤ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –∏ –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ 15, —Ç–æ –∑–∞–∫–æ–Ω—á–∏ –∏—Å—Ç–æ—Ä–∏—é, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–≤ –µ—ë —Ñ–∏–Ω–∞–ª, –ø—Ä–∏—á–µ–º –≤ —ç—Ç–æ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö, –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤. \n\n{context}"
)

prompt = ChatPromptTemplate.from_messages(
    [
        ("system", system_prompt),
        ("human", "{input}"),
    ]
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–ø–æ—á–µ–∫ LangChain (–¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞)
question_answer_chain = create_stuff_documents_chain(llm, prompt)
rag_chain = create_retrieval_chain(retriever, question_answer_chain)

workflow = StateGraph(state_schema=MessagesState)
from tenacity import (
    retry,
    stop_after_attempt,
    wait_exponential,
    retry_if_exception_type,
)
import httpx


@retry(
    stop=stop_after_attempt(3),
    wait=wait_exponential(multiplier=1, min=2, max=10),
    retry=retry_if_exception_type(httpx.HTTPError),
)
def safe_llm_invoke(messages):
    return llm.invoke(messages)


def call_model(state: MessagesState):
    try:
        response = llm.invoke(state["messages"])
        return {"messages": response}
    except Exception as e:
        logging.error(f"Model error: {str(e)}")
        return {"messages": "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞"}


workflow.add_node("model", call_model)

workflow.set_entry_point("model")
workflow.set_finish_point("model")
memory = MemorySaver()
app = workflow.compile(checkpointer=memory)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
def split_text(text, chunk_size=4096):
    return [text[i : i + chunk_size] for i in range(0, len(text), chunk_size)]


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —á–∏—Å–ª–∞ –≤ emoji (—Ç–æ–ª—å–∫–æ –¥–ª—è 1-9)
def number_to_emoji(number: int) -> str:
    return {1: "1Ô∏è‚É£", 2: "2Ô∏è‚É£", 3: "3Ô∏è‚É£"}.get(number, str(number))


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞, —á—Ç–æ–±—ã –æ—Ç–¥–µ–ª–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞.
def parse_response(response: str):
    marker = "–ö–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Ç—ã —Å–¥–µ–ª–∞–µ—à—å?"
    if marker in response:
        parts = response.split(marker)
        main_text = parts[0].strip()
        options_raw = parts[1].strip()

        options = []
        pattern = re.compile(
            r"^\s*(\d+)[.)]?\s*(.+?)(?=\s*\d+[.)]?|\s*$)", re.MULTILINE
        )
        matches = pattern.findall(options_raw)

        for num, text in matches[:3]:
            options.append((int(num), text.strip()))

        return main_text, options
    else:
        return response, []


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def start_command(message: Message, state: FSMContext):
    await state.set_state(Reg.start)
    await message.reply(
        "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Crystals of Fate! üåü\n\n"
        "üîπ –ù–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç ‚úÖ - –ø–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ –Ω–æ–≤–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ\n"
        "üîπ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚ñ∂Ô∏è - –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –∏–≥—Ä–µ\n"
        "üîπ –ù–æ–≤–∞—è –∏–≥—Ä–∞ üåç - –Ω–∞—á–∞—Ç—å —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞",
        reply_markup=start_keyboard,
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è (Reg.start)
@dp.message(Reg.start)
async def start_story(message: Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        if message.text == "‚ú® –ù–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç ‚úÖ":
            with sqlite3.connect("users_data.db") as conn:
                cursor = conn.cursor()

                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–ø–∏—Å–∏
                cursor.execute(
                    "DELETE FROM user_progress WHERE user_id = ?", (user_id,)
                )

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏
                new_thread_id = f"{message.chat.id}_{int(time.time())}"

                # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                cursor.execute(
                    "INSERT INTO user_progress (user_id, progress, story, thread_id) VALUES (?, ?, ?, ?)",
                    (user_id, 1, json.dumps([]), new_thread_id),
                )
                conn.commit()

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await state.update_data(
                    thread_id=new_thread_id, progress=1, story=json.dumps([])
                )
                await state.set_state(Reg.dialog)

                # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ä—Ç
                logging.info(f"New game started for user {user_id}")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await handle_dialog(message, state)

        elif message.text == "üìú –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚ñ∂Ô∏è":
            with sqlite3.connect("users_data.db") as conn:
                cursor = conn.cursor()
                cursor.execute(
                    "SELECT thread_id, progress, story FROM user_progress WHERE user_id = ?",
                    (user_id,),
                )
                row = cursor.fetchone()

            if not row or not row[2]:
                await message.answer(
                    "‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –∏–≥—Ä—ã. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é!",
                    reply_markup=start_keyboard,
                )
                return

            # –ü–∞—Ä—Å–∏–º –∏—Å—Ç–æ—Ä–∏—é
            try:
                story_data = json.loads(row[2])
            except json.JSONDecodeError:
                story_data = []

            await state.update_data(thread_id=row[0], progress=row[1], story=story_data)
            await state.set_state(Reg.dialog)
            await message.answer("‚èØ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤–∞—à–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ!")
            await handle_dialog(message, state)

        elif message.text == "üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞ üåç":
            with sqlite3.connect("users_data.db") as conn:
                cursor = conn.cursor()
                cursor.execute(
                    "DELETE FROM user_progress WHERE user_id = ?", (user_id,)
                )
                conn.commit()

            await state.clear()
            await message.answer(
                "üîÑ –í–∞—à–∞ —Å—Ç–∞—Ä–∞—è –∏—Å—Ç–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É!",
                reply_markup=start_keyboard,
            )
            await state.set_state(Reg.start)

    except Exception as e:
        logging.error(f"Start error: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


import json


# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ (Reg.dialog)
@dp.message(Reg.dialog)
async def handle_dialog(message: Message, state: FSMContext):
    global retriever, bot
    user_id = message.from_user.id
    data = await state.get_data()
    if data.get("awaiting_custom_input"):
        await state.update_data(awaiting_custom_input=False)
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        fake_message = Message(
            text=message.text,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –µ—Å—Ç—å
            from_user=message.from_user,
            chat=message.chat,
            message_id=message.message_id,
            date=message.date,
            bot=bot,
        )
        await handle_dialog(fake_message, state)
        return
    try:
        data = await state.get_data()
        thread_id = data.get("thread_id", str(message.chat.id))

        with sqlite3.connect("users_data.db") as conn:
            cursor = conn.cursor()
            cursor.execute(
                "SELECT progress, story FROM user_progress WHERE user_id = ?",
                (user_id,),
            )
            row = cursor.fetchone()
            current_progress = row[0] if row else 1

            # –ü–∞—Ä—Å–∏–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—è story
            try:
                messages_history = json.loads(row[1]) if row and row[1] else []
            except (json.JSONDecodeError, TypeError):
                messages_history = []

            if current_progress >= 15:
                finale_text = """
                                üéâ –≠–ø–∏–ª–æ–≥: –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –Ω–æ –ª–µ–≥–µ–Ω–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è‚Ä¶ üóùÔ∏è

                *–° –ø–æ—Å–ª–µ–¥–Ω–∏–º —à–∞–≥–æ–º –≤–∞—à–µ–≥–æ –ø—É—Ç–∏ –º–µ—Ä—Ü–∞—é—â–∏–π —Å–≤–µ—Ç –∑–∞–ª–∞ —É–≥–∞—Å–∞–µ—Ç, –æ—Å—Ç–∞–≤–ª—è—è –ª–∏—à—å —Ç–∏—Ö–∏–π —à–µ–ø–æ—Ç –≤–µ—Ç—Ä–∞, —á—Ç–æ –Ω–µ—Å—ë—Ç –æ—Ç–≥–æ–ª–æ—Å–∫–∏ –≤–∞—à–∏—Ö –ø–æ–¥–≤–∏–≥–æ–≤. –í—ã —Å—Ç–æ–∏—Ç–µ –Ω–∞ –ø–æ—Ä–æ–≥–µ –º–µ–∂–¥—É –º–∏—Ä–∞–º–∏ ‚Äî —Ç–µ–º, —á—Ç–æ —Å–ø–∞—Å–ª–∏, –∏ —Ç–µ–º, —á—Ç–æ –º–æ–≥–ª–∏ –±—ã –ø–æ—Ç–µ—Ä—è—Ç—å. –í–∞—à–∏ —Ä–µ—à–µ–Ω–∏—è —Å—Ç–∞–ª–∏ –∏—Å—Ç–æ—Ä–∏–µ–π, –≤–∞—à–∏ –∂–µ—Ä—Ç–≤—ã ‚Äî –ø–µ—Å–Ω–µ–π, –∞ –≤–∞—à–∞ —Å–º–µ–ª–æ—Å—Ç—å ‚Äî –ø—Ä–∏–º–µ—Ä–æ–º –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –ø—Ä–∏–¥—ë—Ç –ø–æ—Å–ª–µ‚Ä¶*

                üåå *–°–ø–∞—Å–∏–±–æ, —Å—Ç—Ä–∞–Ω–Ω–∏–∫!*  
                –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ —Ç–æ, —á—Ç–æ –¥–æ–≤–µ—Ä–∏–ª–∏ –Ω–∞–º —Å–≤–æ–∏ –º—ã—Å–ª–∏, –≤—Ä–µ–º—è –∏ –æ—Ç–≤–∞–≥—É. –ö–∞–∂–¥–∞—è –∫–æ–Ω—Ü–æ–≤–∫–∞ –≤ —ç—Ç–æ–º –º–∏—Ä–µ ‚Äî –ª–∏—à—å –æ–¥–Ω–∞ –∏–∑ –Ω–∏—Ç–µ–π –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º –∫–æ–≤—Ä–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π. –í–æ–∑–º–æ–∂–Ω–æ, –æ–¥–Ω–∞–∂–¥—ã –≤—ã –≤–µ—Ä–Ω—ë—Ç–µ—Å—å, —á—Ç–æ–±—ã —Ä–∞—Å–ø—É—Ç–∞—Ç—å –¥—Ä—É–≥—É—é‚Ä¶  

                üîç *P.S.*  
                –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç—ë–º–Ω—ã–µ —É–≥–æ–ª–∫–∏ –∫–∞—Ä—Ç—ã, —Å–ø—Ä—è—Ç–∞–Ω–Ω—ã–µ —Å–≤–∏—Ç–∫–∏ –∏–ª–∏ —Å—Ç–∞—Ä—ã–µ –¥—Ä—É–∂–µ—Å–∫–∏–µ —Å–≤—è–∑–∏ ‚Äî –∫—Ç–æ –∑–Ω–∞–µ—Ç, –∫–∞–∫–∏–µ —Å–µ–∫—Ä–µ—Ç—ã –µ—â—ë –∂–¥—É—Ç —Å–≤–æ–µ–≥–æ —á–∞—Å–∞?  

                *¬´–°—É–¥—å–±–∞ –ª—é–±–∏—Ç –∏—Ä–æ–Ω–∏—á–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä—ã. –ê –≤—ã?¬ª*  

                ‚Äî –ö–æ–º–∞–Ω–¥–∞ Crystals of Fate  
                *P.P.S. –ï—Å–ª–∏ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ ‚Äî –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–º —Å —Ç–µ–º–∏, –∫—Ç–æ –Ω–µ –±–æ–∏—Ç—Å—è –∑–∞–≥–∞–¥–æ–∫. –í–µ–¥—å –Ω–∞—Å—Ç–æ—è—â–∏–µ –∫–≤–µ—Å—Ç—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è, –∫–æ–≥–¥–∞ –∑–∞–∂–∏–≥–∞—é—Ç—Å—è —ç–∫—Ä–∞–Ω—ã.*  

                ‚ú® *–î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞—Ö —Å–ª–æ–≤‚Ä¶* ‚ú®
                    """
                await bot.send_message(message.chat.id, finale_text, parse_mode="Markdown")

                # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Å–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                with sqlite3.connect("users_data.db") as conn:
                    cursor = conn.cursor()
                    cursor.execute(
                        "DELETE FROM user_progress WHERE user_id = ?", (user_id,)
                    )
                    conn.commit()

                await state.clear()
                await bot.send_message(
                    message.chat.id,
                    "–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è",
                    reply_markup=start_keyboard
                )
                return

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_message = {"role": "user", "content": message.text}
            messages_history.append(user_message)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞
            if current_progress == 1:
                retrieved_docs = retriever.invoke(message.text)
                context = "\n".join([doc.page_content for doc in retrieved_docs])
                system_message = {
                    "role": "system",
                    "content": system_prompt.format(context=context),
                }
                full_chain = [system_message] + messages_history
            else:
                full_chain = messages_history[-6:]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –ø–∞—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç LangChain —Å–æ–æ–±—â–µ–Ω–∏–π
            langchain_messages = []
            for msg in full_chain:
                if msg["role"] == "system":
                    langchain_messages.append(SystemMessage(content=msg["content"]))
                else:
                    langchain_messages.append(HumanMessage(content=msg["content"]))

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏
            try:
                config = {
                    "configurable": {
                        "thread_id": thread_id,
                        "progress": current_progress,
                    }
                }
                results = app.invoke({"messages": langchain_messages}, config)
                assistant_response = results["messages"][-1].content

                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
                messages_history.append(
                    {"role": "assistant", "content": assistant_response}
                )

                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
                cursor.execute(
                    """UPDATE user_progress 
                       SET progress = ?, 
                           story = ?
                       WHERE user_id = ?""",
                    (current_progress + 1, json.dumps(messages_history), user_id),
                )
                conn.commit()

                # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
                main_text, options = parse_response(assistant_response)

                if not options:
                    await bot.send_message(chat_id=message.chat.id, text=main_text)
                    return

                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                buttons_row1 = []
                for num, text in options[:3]:
                    buttons_row1.append(
                        InlineKeyboardButton(
                            text=number_to_emoji(num), callback_data=f"option_{num}"
                        )
                    )

                buttons_row2 = [
                    InlineKeyboardButton(
                        text="4Ô∏è‚É£ –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="custom_option"
                    )
                ]

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                options_text = "\n".join(
                    [f"{number_to_emoji(num)} {text}" for num, text in options[:3]]
                )
                response_text = f"{main_text}\n\n{options_text}"

                await bot.send_message(
                    chat_id=message.chat.id,
                    text=response_text,
                    reply_markup=InlineKeyboardMarkup(
                        inline_keyboard=[buttons_row1, buttons_row2]
                    ),
                )

            except httpx.HTTPStatusError as e:
                if e.response.status_code == 429:
                    await message.answer(
                        "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥..."
                    )
                    await asyncio.sleep(10)
                else:
                    raise

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –º–æ–¥–µ–ª–∏: {str(e)}")
                await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞")

    except Exception as e:
        logging.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")


@dp.callback_query(F.data == "custom_option")
async def handle_custom_option(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.update_data(awaiting_custom_input=True)
    await bot.send_message(
        chat_id=callback.message.chat.id, text="‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞
@dp.callback_query(F.data.startswith("option_"))
async def process_option(callback: types.CallbackQuery, state: FSMContext):
    try:
        option_number = callback.data.split("_")[1]
        await callback.answer()

        # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –±–æ—Ç–∞
        fake_message = Message(
            text=option_number,
            from_user=callback.from_user,
            chat=callback.message.chat,
            message_id=callback.message.message_id,
            date=callback.message.date,
            bot=bot,  # –í–∞–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É
        )

        await handle_dialog(fake_message, state)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞: {str(e)}")
        await bot.send_message(
            chat_id=callback.message.chat.id, text="‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞"
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–≥—Ä—ã (—Å–æ—Å—Ç–æ—è–Ω–∏–µ Reg.cont) ‚Äì –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
@dp.message(Reg.cont)
async def handle_continue(message: Message, state: FSMContext):
    user_id = message.from_user.id
    cursor.execute(
        "SELECT thread_id, progress, story FROM user_progress WHERE user_id = ?",
        (user_id,),
    )
    row = cursor.fetchone()
    if row is None or row[2] == "":
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∏–≥—Ä. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é!", reply_markup=start_keyboard
        )
        await state.set_state(Reg.start)
    else:
        await state.update_data(thread_id=row[0], progress=row[1], story=row[2])
        await message.answer(
            f"üìú –í–∞—à–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è:\n{row[2]}\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–≥—Ä—É!"
        )
        await state.set_state(Reg.dialog)
        await handle_dialog(message, state)


async def main():
    logging.info("Starting bot...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
